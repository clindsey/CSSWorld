// Generated by CoffeeScript 1.4.0
(function() {

  define(["collections/ViewportTiles", "views/viewport/ViewportTile", "models/Viewport", "collections/Plants", "models/Plant", "views/Plant", "models/Heightmap", "Alea", "Backbone"], function(viewportTiles, ViewportTileView, viewportModel, plants, PlantModel, PlantView, heightmapModel) {
    var ViewportView;
    return ViewportView = Backbone.View.extend({
      el: ".map-viewport",
      initialize: function() {
        this.render();
        this.makePlants();
        return this.listenTo(viewportModel, "moved", this.onViewportMoved);
      },
      render: function() {
        var _this = this;
        this.$el.css({
          width: viewportModel.get("width") * 16,
          height: viewportModel.get("height") * 16
        });
        this.grid = [];
        viewportTiles.each(function(viewportTileModel) {
          var viewportTileView;
          viewportTileView = new ViewportTileView;
          viewportTileView.type = viewportTileModel.get("type");
          _this.$el.append(viewportTileView.render().$el);
          return _this.grid.push(viewportTileView);
        });
        return this;
      },
      makePlants: function() {
        var giveUpCounter, heightmapData, plant, plantCount, plantView, rnd, x, y, _results;
        plantCount = 100;
        giveUpCounter = 100;
        rnd = new Alea(heightmapModel.get("SEED"));
        heightmapData = heightmapModel.get("data");
        _results = [];
        while (plants.length < plantCount && giveUpCounter > 0) {
          x = ~~(rnd() * heightmapModel.get("worldTileWidth"));
          y = ~~(rnd() * heightmapModel.get("worldTileHeight"));
          if (heightmapData[y][x].get("type") !== 255) {
            giveUpCounter -= 1;
            continue;
          }
          plant = new PlantModel({
            x: x,
            y: y
          });
          plantView = new PlantView({
            model: plant
          });
          plants.add(plant);
          _results.push(this.$el.append(plantView.render().$el));
        }
        return _results;
      },
      onViewportMoved: function() {
        return _.each(this.grid, function(viewportTileView, index) {
          viewportTileView.type = viewportTiles.at(index).get("type");
          return viewportTileView.setBackgroundPosition();
        });
      }
    });
  });

}).call(this);
